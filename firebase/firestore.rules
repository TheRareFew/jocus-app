rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate comedy structure data
    function isValidComedyStructure(data) {
      // More flexible validation that accepts any string type for beats
      let hasValidTimeline = data.timeline is list 
        && data.timeline.size() > 0 
        && data.timeline.size() <= 50
        && data.timeline[0].type is string
        && data.timeline[0].description is string;
      
      return data.keys().hasAll(['title', 'description', 'timeline', 'authorId'])
        && data.title is string
        && data.description is string
        && data.authorId is string
        && hasValidTimeline;
    }

    // Helper function to validate bit data
    function isValidBit(data) {
      return data.keys().hasAll(['title', 'description', 'userId', 'videoUrl'])
        && data.title is string
        && data.description is string
        && data.userId == request.auth.uid
        && data.videoUrl is string;
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow read: if true;  // Anyone can read videos
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Comedy bits collection
    match /bits/{bitId} {
      allow read: if true;  // Anyone can read bits
      allow create: if isAuthenticated();  // Simplified bit creation rule
      allow update, delete: if isOwner(resource.data.userId);
      
      // Analytics subcollection
      match /analytics/{docId} {
        allow read: if true;
        allow create, update: if isAuthenticated();
      }

      // Reactions subcollection
      match /reactions/{reactionId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(resource.data.userId);
      }
    }

    // Comedy structures collection
    match /comedy_structures/{structureId} {
      allow read: if true;  // Anyone can read structures
      allow create: if isAuthenticated() 
        && isValidComedyStructure(request.resource.data)
        && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.authorId);
    }

    // User profiles collection
    match /users/{userId} {
      allow read: if true;  // Public profiles
      allow create, update: if isOwner(userId);
      allow delete: if false;  // Don't allow profile deletion
    }

    // User's personal comedy structures
    match /users/{userId}/comedy_structures/{structureId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;  // Allow user to read their own structures
      allow create, update: if isOwner(userId)
        && isValidComedyStructure(request.resource.data)
        && request.resource.data.authorId == userId
        && request.resource.data.isTemplate == false;  // Personal structures only
      allow delete: if isOwner(userId);
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}