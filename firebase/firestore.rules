rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate comedy structure data
    function isValidComedyStructure(data) {
      let validTypes = ['setup', 'pause', 'punchline', 'callback'];
      let hasValidBeat = data.timeline[0].type in validTypes;
      
      return data.keys().hasAll(['title', 'description', 'timeline'])
        && data.title is string
        && data.description is string
        && data.timeline is list
        && data.timeline.size() > 0
        && data.timeline.size() <= 20
        && hasValidBeat;
    }

    // Helper function to validate bit data
    function isValidBit(data) {
      return data.keys().hasAll(['title', 'description', 'userId', 'videoUrl'])
        && data.title is string
        && data.description is string
        && data.userId == request.auth.uid
        && data.videoUrl is string;
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow read: if true;  // Anyone can read videos
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Comedy bits collection
    match /bits/{bitId} {
      allow read: if true;  // Anyone can read bits
      allow create: if isAuthenticated() 
        && isValidBit(request.resource.data);
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);

      // Subcollection for reactions
      match /reactions/{reactionId} {
        allow read: if true;  // Anyone can read reactions
        allow create: if isAuthenticated()
          && request.resource.data.keys().hasAll(['type', 'timestamp', 'userId', 'createdAt'])
          && request.resource.data.type in ['rofl', 'smirk', 'eyeroll', 'vomit']
          && request.resource.data.timestamp is float
          && request.resource.data.timestamp >= 0
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.createdAt is timestamp;
        allow update: if false;  // Reactions cannot be modified
        allow delete: if isAuthenticated() 
          && resource.data.userId == request.auth.uid;  // Users can only delete their own reactions
      }

      // Subcollection for analytics
      match /analytics/{docId} {
        allow read: if true;  // Anyone can read analytics
        allow create: if isAuthenticated() 
          && request.resource.data.keys().hasAll(['totalReactions', 'reactionCounts', 'viewCount', 'lastUpdated']);
        allow update: if isAuthenticated();  // Allow updates for analytics
      }
    }

    // Comedy structures collection (templates)
    match /comedy_structures/{structureId} {
      allow read: if true;  // Public read access
      allow create, update: if isAuthenticated()
        && isValidComedyStructure(request.resource.data)
        && request.resource.data.isTemplate == true;  // Only allow templates here
      allow delete: if isAuthenticated();
    }

    // User's personal comedy structures
    match /users/{userId}/comedy_structures/{structureId} {
      allow read: if isOwner(userId);  // Only owner can read their structures
      allow create, update: if isOwner(userId)
        && isValidComedyStructure(request.resource.data)
        && request.resource.data.authorId == userId
        && request.resource.data.isTemplate == false;  // Personal structures only
      allow delete: if isOwner(userId);
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}