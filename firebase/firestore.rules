rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow read: if true;  // Anyone can read videos
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Comedy structures collection rules
    match /comedy_structures/{structureId} {
      allow read: if true;  // Public read access
      allow create, update: if isAuthenticated() 
        && request.resource.data.keys().hasAll([
          'title', 'description', 'timeline', 'metrics', 'metadata'
        ]) 
        && request.resource.data.title is string
        && request.resource.data.description is string
        && request.resource.data.timeline is list
        && request.resource.data.metrics is map
        && request.resource.data.metadata is map
        
        // Validate timeline structure
        && request.resource.data.timeline.size() > 0
        && request.resource.data.timeline.size() <= 20
        && request.resource.data.timeline.all(beat => 
          beat.keys().hasAll(['description', 'durationSeconds', 'type'])
          && beat.description is string
          && beat.durationSeconds is number
          && beat.durationSeconds > 0
          && beat.type in ['setup', 'pause', 'punchline', 'callback']
        )
        
        // Validate metrics
        && request.resource.data.metrics.keys().hasAll([
          'laughDensity',
          'audienceScore'
        ])
        && request.resource.data.metrics.laughDensity is number
        && request.resource.data.metrics.laughDensity >= 0
        && request.resource.data.metrics.audienceScore is number
        && request.resource.data.metrics.audienceScore >= 0
        && request.resource.data.metrics.audienceScore <= 10
        
        // Validate metadata
        && request.resource.data.metadata.keys().hasAll([
          'subject',
          'comedyStyle',
          'duration',
          'popularity',
          'tags'
        ])
        && request.resource.data.metadata.subject is string
        && request.resource.data.metadata.comedyStyle is string
        && request.resource.data.metadata.duration is number
        && request.resource.data.metadata.duration > 0
        && request.resource.data.metadata.popularity is number
        && request.resource.data.metadata.popularity >= 0
        && request.resource.data.metadata.tags is list;
      
      allow delete: if isAuthenticated();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}